/* 
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse20013Users
    /// </summary>
    [DataContract]
    public partial class InlineResponse20013Users :  IEquatable<InlineResponse20013Users>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013Users" /> class.
        /// </summary>
        /// <param name="AccountInformation">AccountInformation.</param>
        /// <param name="OrganizationInformation">OrganizationInformation.</param>
        /// <param name="ContactInformation">ContactInformation.</param>
        public InlineResponse20013Users(InlineResponse20013AccountInformation AccountInformation = default(InlineResponse20013AccountInformation), InlineResponse20013OrganizationInformation OrganizationInformation = default(InlineResponse20013OrganizationInformation), InlineResponse20013ContactInformation ContactInformation = default(InlineResponse20013ContactInformation))
        {
            this.AccountInformation = AccountInformation;
            this.OrganizationInformation = OrganizationInformation;
            this.ContactInformation = ContactInformation;
        }
        
        /// <summary>
        /// Gets or Sets AccountInformation
        /// </summary>
        [DataMember(Name="accountInformation", EmitDefaultValue=false)]
        public InlineResponse20013AccountInformation AccountInformation { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationInformation
        /// </summary>
        [DataMember(Name="organizationInformation", EmitDefaultValue=false)]
        public InlineResponse20013OrganizationInformation OrganizationInformation { get; set; }

        /// <summary>
        /// Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name="contactInformation", EmitDefaultValue=false)]
        public InlineResponse20013ContactInformation ContactInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20013Users {\n");
            sb.Append("  AccountInformation: ").Append(AccountInformation).Append("\n");
            sb.Append("  OrganizationInformation: ").Append(OrganizationInformation).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse20013Users);
        }

        /// <summary>
        /// Returns true if InlineResponse20013Users instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20013Users to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013Users other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountInformation == other.AccountInformation ||
                    this.AccountInformation != null &&
                    this.AccountInformation.Equals(other.AccountInformation)
                ) && 
                (
                    this.OrganizationInformation == other.OrganizationInformation ||
                    this.OrganizationInformation != null &&
                    this.OrganizationInformation.Equals(other.OrganizationInformation)
                ) && 
                (
                    this.ContactInformation == other.ContactInformation ||
                    this.ContactInformation != null &&
                    this.ContactInformation.Equals(other.ContactInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountInformation != null)
                    hash = hash * 59 + this.AccountInformation.GetHashCode();
                if (this.OrganizationInformation != null)
                    hash = hash * 59 + this.OrganizationInformation.GetHashCode();
                if (this.ContactInformation != null)
                    hash = hash * 59 + this.ContactInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
