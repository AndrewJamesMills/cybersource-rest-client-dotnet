/* 
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator :  IEquatable<Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator>, IValidatableObject
    {
        /// <summary>
        /// This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. 
        /// </summary>
        /// <value>This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Customer for "customer"
            /// </summary>
            [EnumMember(Value = "customer")]
            Customer,
            
            /// <summary>
            /// Enum Merchant for "merchant"
            /// </summary>
            [EnumMember(Value = "merchant")]
            Merchant
        }

        /// <summary>
        /// This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. 
        /// </summary>
        /// <value>This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator" /> class.
        /// </summary>
        /// <param name="Type">This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. .</param>
        /// <param name="CredentialStoredOnFile">Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. .</param>
        /// <param name="StoredCredentialUsed">Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. .</param>
        /// <param name="MerchantInitiatedTransaction">MerchantInitiatedTransaction.</param>
        public Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator(TypeEnum? Type = default(TypeEnum?), bool? CredentialStoredOnFile = default(bool?), bool? StoredCredentialUsed = default(bool?), Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction MerchantInitiatedTransaction = default(Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction))
        {
            this.Type = Type;
            this.CredentialStoredOnFile = CredentialStoredOnFile;
            this.StoredCredentialUsed = StoredCredentialUsed;
            this.MerchantInitiatedTransaction = MerchantInitiatedTransaction;
        }
        

        /// <summary>
        /// Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. 
        /// </summary>
        /// <value>Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. </value>
        [DataMember(Name="credentialStoredOnFile", EmitDefaultValue=false)]
        public bool? CredentialStoredOnFile { get; set; }

        /// <summary>
        /// Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. 
        /// </summary>
        /// <value>Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. </value>
        [DataMember(Name="storedCredentialUsed", EmitDefaultValue=false)]
        public bool? StoredCredentialUsed { get; set; }

        /// <summary>
        /// Gets or Sets MerchantInitiatedTransaction
        /// </summary>
        [DataMember(Name="merchantInitiatedTransaction", EmitDefaultValue=false)]
        public Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction MerchantInitiatedTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CredentialStoredOnFile: ").Append(CredentialStoredOnFile).Append("\n");
            sb.Append("  StoredCredentialUsed: ").Append(StoredCredentialUsed).Append("\n");
            sb.Append("  MerchantInitiatedTransaction: ").Append(MerchantInitiatedTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.CredentialStoredOnFile == other.CredentialStoredOnFile ||
                    this.CredentialStoredOnFile != null &&
                    this.CredentialStoredOnFile.Equals(other.CredentialStoredOnFile)
                ) && 
                (
                    this.StoredCredentialUsed == other.StoredCredentialUsed ||
                    this.StoredCredentialUsed != null &&
                    this.StoredCredentialUsed.Equals(other.StoredCredentialUsed)
                ) && 
                (
                    this.MerchantInitiatedTransaction == other.MerchantInitiatedTransaction ||
                    this.MerchantInitiatedTransaction != null &&
                    this.MerchantInitiatedTransaction.Equals(other.MerchantInitiatedTransaction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.CredentialStoredOnFile != null)
                    hash = hash * 59 + this.CredentialStoredOnFile.GetHashCode();
                if (this.StoredCredentialUsed != null)
                    hash = hash * 59 + this.StoredCredentialUsed.GetHashCode();
                if (this.MerchantInitiatedTransaction != null)
                    hash = hash * 59 + this.MerchantInitiatedTransaction.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
