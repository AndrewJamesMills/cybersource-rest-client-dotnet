/* 
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse20012ApplicationInformationApplications
    /// </summary>
    [DataContract]
    public partial class InlineResponse20012ApplicationInformationApplications :  IEquatable<InlineResponse20012ApplicationInformationApplications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012ApplicationInformationApplications" /> class.
        /// </summary>
        /// <param name="Name">The description for this field is not available..</param>
        /// <param name="Status">The description for this field is not available..</param>
        /// <param name="ReasonCode">The description for this field is not available..</param>
        /// <param name="RCode">The description for this field is not available..</param>
        /// <param name="RFlag">The description for this field is not available..</param>
        /// <param name="ReconciliationId">The description for this field is not available..</param>
        /// <param name="RMessage">The description for this field is not available..</param>
        /// <param name="ReturnCode">The description for this field is not available..</param>
        public InlineResponse20012ApplicationInformationApplications(string Name = default(string), string Status = default(string), string ReasonCode = default(string), string RCode = default(string), string RFlag = default(string), string ReconciliationId = default(string), string RMessage = default(string), string ReturnCode = default(string))
        {
            this.Name = Name;
            this.Status = Status;
            this.ReasonCode = ReasonCode;
            this.RCode = RCode;
            this.RFlag = RFlag;
            this.ReconciliationId = ReconciliationId;
            this.RMessage = RMessage;
            this.ReturnCode = ReturnCode;
        }
        
        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="rCode", EmitDefaultValue=false)]
        public string RCode { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="rFlag", EmitDefaultValue=false)]
        public string RFlag { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="reconciliationId", EmitDefaultValue=false)]
        public string ReconciliationId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="rMessage", EmitDefaultValue=false)]
        public string RMessage { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="returnCode", EmitDefaultValue=false)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012ApplicationInformationApplications {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  RCode: ").Append(RCode).Append("\n");
            sb.Append("  RFlag: ").Append(RFlag).Append("\n");
            sb.Append("  ReconciliationId: ").Append(ReconciliationId).Append("\n");
            sb.Append("  RMessage: ").Append(RMessage).Append("\n");
            sb.Append("  ReturnCode: ").Append(ReturnCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse20012ApplicationInformationApplications);
        }

        /// <summary>
        /// Returns true if InlineResponse20012ApplicationInformationApplications instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20012ApplicationInformationApplications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012ApplicationInformationApplications other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ReasonCode == other.ReasonCode ||
                    this.ReasonCode != null &&
                    this.ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    this.RCode == other.RCode ||
                    this.RCode != null &&
                    this.RCode.Equals(other.RCode)
                ) && 
                (
                    this.RFlag == other.RFlag ||
                    this.RFlag != null &&
                    this.RFlag.Equals(other.RFlag)
                ) && 
                (
                    this.ReconciliationId == other.ReconciliationId ||
                    this.ReconciliationId != null &&
                    this.ReconciliationId.Equals(other.ReconciliationId)
                ) && 
                (
                    this.RMessage == other.RMessage ||
                    this.RMessage != null &&
                    this.RMessage.Equals(other.RMessage)
                ) && 
                (
                    this.ReturnCode == other.ReturnCode ||
                    this.ReturnCode != null &&
                    this.ReturnCode.Equals(other.ReturnCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.ReasonCode != null)
                    hash = hash * 59 + this.ReasonCode.GetHashCode();
                if (this.RCode != null)
                    hash = hash * 59 + this.RCode.GetHashCode();
                if (this.RFlag != null)
                    hash = hash * 59 + this.RFlag.GetHashCode();
                if (this.ReconciliationId != null)
                    hash = hash * 59 + this.ReconciliationId.GetHashCode();
                if (this.RMessage != null)
                    hash = hash * 59 + this.RMessage.GetHashCode();
                if (this.ReturnCode != null)
                    hash = hash * 59 + this.ReturnCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
