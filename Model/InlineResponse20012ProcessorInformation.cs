/* 
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse20012ProcessorInformation
    /// </summary>
    [DataContract]
    public partial class InlineResponse20012ProcessorInformation :  IEquatable<InlineResponse20012ProcessorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012ProcessorInformation" /> class.
        /// </summary>
        /// <param name="Processor">Processor.</param>
        /// <param name="TransactionId">Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. .</param>
        /// <param name="NetworkTransactionId">The description for this field is not available..</param>
        /// <param name="ResponseId">The description for this field is not available..</param>
        /// <param name="ProviderTransactionId">The description for this field is not available..</param>
        /// <param name="ApprovalCode">Authorization code. Returned only when the processor returns this value. .</param>
        /// <param name="ResponseCode">For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. .</param>
        /// <param name="Avs">Avs.</param>
        /// <param name="CardVerification">CardVerification.</param>
        /// <param name="AchVerification">AchVerification.</param>
        /// <param name="ElectronicVerificationResults">ElectronicVerificationResults.</param>
        public InlineResponse20012ProcessorInformation(InlineResponse20012ProcessorInformationProcessor Processor = default(InlineResponse20012ProcessorInformationProcessor), string TransactionId = default(string), string NetworkTransactionId = default(string), string ResponseId = default(string), string ProviderTransactionId = default(string), string ApprovalCode = default(string), string ResponseCode = default(string), InlineResponse201ProcessorInformationAvs Avs = default(InlineResponse201ProcessorInformationAvs), InlineResponse20012ProcessorInformationCardVerification CardVerification = default(InlineResponse20012ProcessorInformationCardVerification), InlineResponse20012ProcessorInformationAchVerification AchVerification = default(InlineResponse20012ProcessorInformationAchVerification), InlineResponse20012ProcessorInformationElectronicVerificationResults ElectronicVerificationResults = default(InlineResponse20012ProcessorInformationElectronicVerificationResults))
        {
            this.Processor = Processor;
            this.TransactionId = TransactionId;
            this.NetworkTransactionId = NetworkTransactionId;
            this.ResponseId = ResponseId;
            this.ProviderTransactionId = ProviderTransactionId;
            this.ApprovalCode = ApprovalCode;
            this.ResponseCode = ResponseCode;
            this.Avs = Avs;
            this.CardVerification = CardVerification;
            this.AchVerification = AchVerification;
            this.ElectronicVerificationResults = ElectronicVerificationResults;
        }
        
        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="processor", EmitDefaultValue=false)]
        public InlineResponse20012ProcessorInformationProcessor Processor { get; set; }

        /// <summary>
        /// Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. 
        /// </summary>
        /// <value>Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. </value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="networkTransactionId", EmitDefaultValue=false)]
        public string NetworkTransactionId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="responseId", EmitDefaultValue=false)]
        public string ResponseId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="providerTransactionId", EmitDefaultValue=false)]
        public string ProviderTransactionId { get; set; }

        /// <summary>
        /// Authorization code. Returned only when the processor returns this value. 
        /// </summary>
        /// <value>Authorization code. Returned only when the processor returns this value. </value>
        [DataMember(Name="approvalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. 
        /// </summary>
        /// <value>For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. </value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// Gets or Sets Avs
        /// </summary>
        [DataMember(Name="avs", EmitDefaultValue=false)]
        public InlineResponse201ProcessorInformationAvs Avs { get; set; }

        /// <summary>
        /// Gets or Sets CardVerification
        /// </summary>
        [DataMember(Name="cardVerification", EmitDefaultValue=false)]
        public InlineResponse20012ProcessorInformationCardVerification CardVerification { get; set; }

        /// <summary>
        /// Gets or Sets AchVerification
        /// </summary>
        [DataMember(Name="achVerification", EmitDefaultValue=false)]
        public InlineResponse20012ProcessorInformationAchVerification AchVerification { get; set; }

        /// <summary>
        /// Gets or Sets ElectronicVerificationResults
        /// </summary>
        [DataMember(Name="electronicVerificationResults", EmitDefaultValue=false)]
        public InlineResponse20012ProcessorInformationElectronicVerificationResults ElectronicVerificationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012ProcessorInformation {\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  NetworkTransactionId: ").Append(NetworkTransactionId).Append("\n");
            sb.Append("  ResponseId: ").Append(ResponseId).Append("\n");
            sb.Append("  ProviderTransactionId: ").Append(ProviderTransactionId).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  Avs: ").Append(Avs).Append("\n");
            sb.Append("  CardVerification: ").Append(CardVerification).Append("\n");
            sb.Append("  AchVerification: ").Append(AchVerification).Append("\n");
            sb.Append("  ElectronicVerificationResults: ").Append(ElectronicVerificationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse20012ProcessorInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse20012ProcessorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20012ProcessorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012ProcessorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Processor == other.Processor ||
                    this.Processor != null &&
                    this.Processor.Equals(other.Processor)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.NetworkTransactionId == other.NetworkTransactionId ||
                    this.NetworkTransactionId != null &&
                    this.NetworkTransactionId.Equals(other.NetworkTransactionId)
                ) && 
                (
                    this.ResponseId == other.ResponseId ||
                    this.ResponseId != null &&
                    this.ResponseId.Equals(other.ResponseId)
                ) && 
                (
                    this.ProviderTransactionId == other.ProviderTransactionId ||
                    this.ProviderTransactionId != null &&
                    this.ProviderTransactionId.Equals(other.ProviderTransactionId)
                ) && 
                (
                    this.ApprovalCode == other.ApprovalCode ||
                    this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    this.ResponseCode == other.ResponseCode ||
                    this.ResponseCode != null &&
                    this.ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    this.Avs == other.Avs ||
                    this.Avs != null &&
                    this.Avs.Equals(other.Avs)
                ) && 
                (
                    this.CardVerification == other.CardVerification ||
                    this.CardVerification != null &&
                    this.CardVerification.Equals(other.CardVerification)
                ) && 
                (
                    this.AchVerification == other.AchVerification ||
                    this.AchVerification != null &&
                    this.AchVerification.Equals(other.AchVerification)
                ) && 
                (
                    this.ElectronicVerificationResults == other.ElectronicVerificationResults ||
                    this.ElectronicVerificationResults != null &&
                    this.ElectronicVerificationResults.Equals(other.ElectronicVerificationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Processor != null)
                    hash = hash * 59 + this.Processor.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.NetworkTransactionId != null)
                    hash = hash * 59 + this.NetworkTransactionId.GetHashCode();
                if (this.ResponseId != null)
                    hash = hash * 59 + this.ResponseId.GetHashCode();
                if (this.ProviderTransactionId != null)
                    hash = hash * 59 + this.ProviderTransactionId.GetHashCode();
                if (this.ApprovalCode != null)
                    hash = hash * 59 + this.ApprovalCode.GetHashCode();
                if (this.ResponseCode != null)
                    hash = hash * 59 + this.ResponseCode.GetHashCode();
                if (this.Avs != null)
                    hash = hash * 59 + this.Avs.GetHashCode();
                if (this.CardVerification != null)
                    hash = hash * 59 + this.CardVerification.GetHashCode();
                if (this.AchVerification != null)
                    hash = hash * 59 + this.AchVerification.GetHashCode();
                if (this.ElectronicVerificationResults != null)
                    hash = hash * 59 + this.ElectronicVerificationResults.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionId (string) maxLength
            if(this.TransactionId != null && this.TransactionId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 50.", new [] { "TransactionId" });
            }

            // ResponseCode (string) maxLength
            if(this.ResponseCode != null && this.ResponseCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCode, length must be less than 10.", new [] { "ResponseCode" });
            }

            yield break;
        }
    }

}
