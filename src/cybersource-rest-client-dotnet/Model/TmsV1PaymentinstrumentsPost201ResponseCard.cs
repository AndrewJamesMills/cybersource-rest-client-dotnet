/* 
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsV1PaymentinstrumentsPost201ResponseCard
    /// </summary>
    [DataContract]
    public partial class TmsV1PaymentinstrumentsPost201ResponseCard :  IEquatable<TmsV1PaymentinstrumentsPost201ResponseCard>, IValidatableObject
    {
        /// <summary>
        /// Credit card brand.
        /// </summary>
        /// <value>Credit card brand.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Visa for "visa"
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa,
            
            /// <summary>
            /// Enum Mastercard for "mastercard"
            /// </summary>
            [EnumMember(Value = "mastercard")]
            Mastercard,
            
            /// <summary>
            /// Enum Americanexpress for "american express"
            /// </summary>
            [EnumMember(Value = "american express")]
            Americanexpress,
            
            /// <summary>
            /// Enum Discover for "discover"
            /// </summary>
            [EnumMember(Value = "discover")]
            Discover,
            
            /// <summary>
            /// Enum Dinersclub for "diners club"
            /// </summary>
            [EnumMember(Value = "diners club")]
            Dinersclub,
            
            /// <summary>
            /// Enum Carteblanche for "carte blanche"
            /// </summary>
            [EnumMember(Value = "carte blanche")]
            Carteblanche,
            
            /// <summary>
            /// Enum Jcb for "jcb"
            /// </summary>
            [EnumMember(Value = "jcb")]
            Jcb,
            
            /// <summary>
            /// Enum Optima for "optima"
            /// </summary>
            [EnumMember(Value = "optima")]
            Optima,
            
            /// <summary>
            /// Enum Twinpaycredit for "twinpay credit"
            /// </summary>
            [EnumMember(Value = "twinpay credit")]
            Twinpaycredit,
            
            /// <summary>
            /// Enum Twinpaydebit for "twinpay debit"
            /// </summary>
            [EnumMember(Value = "twinpay debit")]
            Twinpaydebit,
            
            /// <summary>
            /// Enum Walmart for "walmart"
            /// </summary>
            [EnumMember(Value = "walmart")]
            Walmart,
            
            /// <summary>
            /// Enum Enroute for "enroute"
            /// </summary>
            [EnumMember(Value = "enroute")]
            Enroute,
            
            /// <summary>
            /// Enum Lowesconsumer for "lowes consumer"
            /// </summary>
            [EnumMember(Value = "lowes consumer")]
            Lowesconsumer,
            
            /// <summary>
            /// Enum Homedepotconsumer for "home depot consumer"
            /// </summary>
            [EnumMember(Value = "home depot consumer")]
            Homedepotconsumer,
            
            /// <summary>
            /// Enum Mbna for "mbna"
            /// </summary>
            [EnumMember(Value = "mbna")]
            Mbna,
            
            /// <summary>
            /// Enum Dickssportswear for "dicks sportswear"
            /// </summary>
            [EnumMember(Value = "dicks sportswear")]
            Dickssportswear,
            
            /// <summary>
            /// Enum Casualcorner for "casual corner"
            /// </summary>
            [EnumMember(Value = "casual corner")]
            Casualcorner,
            
            /// <summary>
            /// Enum Sears for "sears"
            /// </summary>
            [EnumMember(Value = "sears")]
            Sears,
            
            /// <summary>
            /// Enum Jal for "jal"
            /// </summary>
            [EnumMember(Value = "jal")]
            Jal,
            
            /// <summary>
            /// Enum Disney for "disney"
            /// </summary>
            [EnumMember(Value = "disney")]
            Disney,
            
            /// <summary>
            /// Enum Maestroukdomestic for "maestro uk domestic"
            /// </summary>
            [EnumMember(Value = "maestro uk domestic")]
            Maestroukdomestic,
            
            /// <summary>
            /// Enum Samsclubconsumer for "sams club consumer"
            /// </summary>
            [EnumMember(Value = "sams club consumer")]
            Samsclubconsumer,
            
            /// <summary>
            /// Enum Samsclubbusiness for "sams club business"
            /// </summary>
            [EnumMember(Value = "sams club business")]
            Samsclubbusiness,
            
            /// <summary>
            /// Enum Nicos for "nicos"
            /// </summary>
            [EnumMember(Value = "nicos")]
            Nicos,
            
            /// <summary>
            /// Enum Billmelater for "bill me later"
            /// </summary>
            [EnumMember(Value = "bill me later")]
            Billmelater,
            
            /// <summary>
            /// Enum Bebe for "bebe"
            /// </summary>
            [EnumMember(Value = "bebe")]
            Bebe,
            
            /// <summary>
            /// Enum Restorationhardware for "restoration hardware"
            /// </summary>
            [EnumMember(Value = "restoration hardware")]
            Restorationhardware,
            
            /// <summary>
            /// Enum Deltaonline for "delta online"
            /// </summary>
            [EnumMember(Value = "delta online")]
            Deltaonline,
            
            /// <summary>
            /// Enum Solo for "solo"
            /// </summary>
            [EnumMember(Value = "solo")]
            Solo,
            
            /// <summary>
            /// Enum Visaelectron for "visa electron"
            /// </summary>
            [EnumMember(Value = "visa electron")]
            Visaelectron,
            
            /// <summary>
            /// Enum Dankort for "dankort"
            /// </summary>
            [EnumMember(Value = "dankort")]
            Dankort,
            
            /// <summary>
            /// Enum Laser for "laser"
            /// </summary>
            [EnumMember(Value = "laser")]
            Laser,
            
            /// <summary>
            /// Enum Cartebleue for "carte bleue"
            /// </summary>
            [EnumMember(Value = "carte bleue")]
            Cartebleue,
            
            /// <summary>
            /// Enum Cartasi for "carta si"
            /// </summary>
            [EnumMember(Value = "carta si")]
            Cartasi,
            
            /// <summary>
            /// Enum Pinlessdebit for "pinless debit"
            /// </summary>
            [EnumMember(Value = "pinless debit")]
            Pinlessdebit,
            
            /// <summary>
            /// Enum Encodedaccount for "encoded account"
            /// </summary>
            [EnumMember(Value = "encoded account")]
            Encodedaccount,
            
            /// <summary>
            /// Enum Uatp for "uatp"
            /// </summary>
            [EnumMember(Value = "uatp")]
            Uatp,
            
            /// <summary>
            /// Enum Household for "household"
            /// </summary>
            [EnumMember(Value = "household")]
            Household,
            
            /// <summary>
            /// Enum Maestrointernational for "maestro international"
            /// </summary>
            [EnumMember(Value = "maestro international")]
            Maestrointernational,
            
            /// <summary>
            /// Enum Gemoneyuk for "ge money uk"
            /// </summary>
            [EnumMember(Value = "ge money uk")]
            Gemoneyuk,
            
            /// <summary>
            /// Enum Koreancards for "korean cards"
            /// </summary>
            [EnumMember(Value = "korean cards")]
            Koreancards,
            
            /// <summary>
            /// Enum Style for "style"
            /// </summary>
            [EnumMember(Value = "style")]
            Style,
            
            /// <summary>
            /// Enum Jcrew for "jcrew"
            /// </summary>
            [EnumMember(Value = "jcrew")]
            Jcrew,
            
            /// <summary>
            /// Enum Payeasechinaprocessingewallet for "payease china processing ewallet"
            /// </summary>
            [EnumMember(Value = "payease china processing ewallet")]
            Payeasechinaprocessingewallet,
            
            /// <summary>
            /// Enum Payeasechinaprocessingbanktransfer for "payease china processing bank transfer"
            /// </summary>
            [EnumMember(Value = "payease china processing bank transfer")]
            Payeasechinaprocessingbanktransfer,
            
            /// <summary>
            /// Enum Meijerprivatelabel for "meijer private label"
            /// </summary>
            [EnumMember(Value = "meijer private label")]
            Meijerprivatelabel,
            
            /// <summary>
            /// Enum Hipercard for "hipercard"
            /// </summary>
            [EnumMember(Value = "hipercard")]
            Hipercard,
            
            /// <summary>
            /// Enum Aura for "aura"
            /// </summary>
            [EnumMember(Value = "aura")]
            Aura,
            
            /// <summary>
            /// Enum Redecard for "redecard"
            /// </summary>
            [EnumMember(Value = "redecard")]
            Redecard,
            
            /// <summary>
            /// Enum Orico for "orico"
            /// </summary>
            [EnumMember(Value = "orico")]
            Orico,
            
            /// <summary>
            /// Enum Elo for "elo"
            /// </summary>
            [EnumMember(Value = "elo")]
            Elo,
            
            /// <summary>
            /// Enum Capitaloneprivatelabel for "capital one private label"
            /// </summary>
            [EnumMember(Value = "capital one private label")]
            Capitaloneprivatelabel,
            
            /// <summary>
            /// Enum Synchronyprivatelabel for "synchrony private label"
            /// </summary>
            [EnumMember(Value = "synchrony private label")]
            Synchronyprivatelabel,
            
            /// <summary>
            /// Enum Chinaunionpay for "china union pay"
            /// </summary>
            [EnumMember(Value = "china union pay")]
            Chinaunionpay
        }

        /// <summary>
        /// Credit card brand.
        /// </summary>
        /// <value>Credit card brand.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsV1PaymentinstrumentsPost201ResponseCard" /> class.
        /// </summary>
        /// <param name="ExpirationMonth">Credit card expiration month..</param>
        /// <param name="ExpirationYear">Credit card expiration year..</param>
        /// <param name="Type">Credit card brand..</param>
        /// <param name="IssueNumber">Credit card issue number..</param>
        /// <param name="StartMonth">Credit card start month..</param>
        /// <param name="StartYear">Credit card start year..</param>
        /// <param name="UseAs">Card Use As Field. Supported value of \&quot;pinless debit\&quot; only. Only for use with Pinless Debit tokens..</param>
        public TmsV1PaymentinstrumentsPost201ResponseCard(string ExpirationMonth = default(string), string ExpirationYear = default(string), TypeEnum? Type = default(TypeEnum?), string IssueNumber = default(string), string StartMonth = default(string), string StartYear = default(string), string UseAs = default(string))
        {
            this.ExpirationMonth = ExpirationMonth;
            this.ExpirationYear = ExpirationYear;
            this.Type = Type;
            this.IssueNumber = IssueNumber;
            this.StartMonth = StartMonth;
            this.StartYear = StartYear;
            this.UseAs = UseAs;
        }
        
        /// <summary>
        /// Credit card expiration month.
        /// </summary>
        /// <value>Credit card expiration month.</value>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Credit card expiration year.
        /// </summary>
        /// <value>Credit card expiration year.</value>
        [DataMember(Name="expirationYear", EmitDefaultValue=false)]
        public string ExpirationYear { get; set; }


        /// <summary>
        /// Credit card issue number.
        /// </summary>
        /// <value>Credit card issue number.</value>
        [DataMember(Name="issueNumber", EmitDefaultValue=false)]
        public string IssueNumber { get; set; }

        /// <summary>
        /// Credit card start month.
        /// </summary>
        /// <value>Credit card start month.</value>
        [DataMember(Name="startMonth", EmitDefaultValue=false)]
        public string StartMonth { get; set; }

        /// <summary>
        /// Credit card start year.
        /// </summary>
        /// <value>Credit card start year.</value>
        [DataMember(Name="startYear", EmitDefaultValue=false)]
        public string StartYear { get; set; }

        /// <summary>
        /// Card Use As Field. Supported value of \&quot;pinless debit\&quot; only. Only for use with Pinless Debit tokens.
        /// </summary>
        /// <value>Card Use As Field. Supported value of \&quot;pinless debit\&quot; only. Only for use with Pinless Debit tokens.</value>
        [DataMember(Name="useAs", EmitDefaultValue=false)]
        public string UseAs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsV1PaymentinstrumentsPost201ResponseCard {\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IssueNumber: ").Append(IssueNumber).Append("\n");
            sb.Append("  StartMonth: ").Append(StartMonth).Append("\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  UseAs: ").Append(UseAs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsV1PaymentinstrumentsPost201ResponseCard);
        }

        /// <summary>
        /// Returns true if TmsV1PaymentinstrumentsPost201ResponseCard instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsV1PaymentinstrumentsPost201ResponseCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsV1PaymentinstrumentsPost201ResponseCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationYear == other.ExpirationYear ||
                    this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.IssueNumber == other.IssueNumber ||
                    this.IssueNumber != null &&
                    this.IssueNumber.Equals(other.IssueNumber)
                ) && 
                (
                    this.StartMonth == other.StartMonth ||
                    this.StartMonth != null &&
                    this.StartMonth.Equals(other.StartMonth)
                ) && 
                (
                    this.StartYear == other.StartYear ||
                    this.StartYear != null &&
                    this.StartYear.Equals(other.StartYear)
                ) && 
                (
                    this.UseAs == other.UseAs ||
                    this.UseAs != null &&
                    this.UseAs.Equals(other.UseAs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hash = hash * 59 + this.ExpirationYear.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.IssueNumber != null)
                    hash = hash * 59 + this.IssueNumber.GetHashCode();
                if (this.StartMonth != null)
                    hash = hash * 59 + this.StartMonth.GetHashCode();
                if (this.StartYear != null)
                    hash = hash * 59 + this.StartYear.GetHashCode();
                if (this.UseAs != null)
                    hash = hash * 59 + this.UseAs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpirationMonth (string) maxLength
            if(this.ExpirationMonth != null && this.ExpirationMonth.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationMonth, length must be less than 12.", new [] { "ExpirationMonth" });
            }

            // ExpirationMonth (string) minLength
            if(this.ExpirationMonth != null && this.ExpirationMonth.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationMonth, length must be greater than 1.", new [] { "ExpirationMonth" });
            }

            yield break;
        }
    }

}
